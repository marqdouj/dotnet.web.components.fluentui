@{
    if (!ExternalDesignTheme)
    {
        <FluentDesignTheme @bind-Mode="@themeSettings.Mode"
                           @bind-OfficeColor="@themeSettings.OfficeColor"
                           StorageName="@themeSettings.StorageName" />
    }
}

<FluentButton Appearance="@settings.Appearance" 
              Disabled="@settings.Disabled"
              IconEnd="@settings.IconEnd"
              IconStart="@settings.IconStart"
              Title="@settings.Title"
              OnClick="ToggleTheme"/>

@code {
    private ThemeToggleSettings settings = new();
    private DesignThemeSettings themeSettings = new();

    [Parameter]
    public ThemeToggleSettings? Settings { get; set; }

    /// <summary>
    /// <see cref="IThemeComponent.ExternalDesignTheme"/>
    /// </summary>
    [Parameter]
    public bool ExternalDesignTheme { get; set; }

    /// <summary>
    /// <see cref="IThemeComponent.ThemeSettings"/>
    /// </summary>
	[Parameter]
    public DesignThemeSettings? ThemeSettings { get; set; }

    /// <summary>
    /// <see cref="FluentDesignTheme.OnLoaded"/>
    /// </summary>
    [Parameter]
    public EventCallback<LoadedEventArgs> Loaded { get; set; }

    /// <summary>
    /// <see cref="FluentDesignTheme.OnLuminanceChanged"/>
    /// </summary>
    [Parameter]
    public EventCallback<LuminanceChangedEventArgs> LuminanceChanged { get; set; }

    private async Task OnLoaded(LoadedEventArgs e)
    {
        await Loaded.InvokeAsync(e);
    }

    private async Task OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        await LuminanceChanged.InvokeAsync(e);
    }

    protected override void OnParametersSet()
    {
        if (ExternalDesignTheme)
            ArgumentNullException.ThrowIfNull(ThemeSettings);

        themeSettings = ThemeSettings ?? new();
        settings = Settings ?? new();
    }

    private void ToggleTheme()
    {
        themeSettings.ToggleTheme();
    }
}