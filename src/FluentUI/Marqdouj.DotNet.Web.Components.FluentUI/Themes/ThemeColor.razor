@{
    if (!ExternalDesignTheme)
    {
        <FluentDesignTheme @bind-Mode="@themeSettings.Mode"
                           @bind-OfficeColor="@themeSettings.OfficeColor"
                           OnLoaded="@OnLoaded"
                           OnLuminanceChanged="@OnLuminanceChanged"
                           StorageName="@themeSettings.StorageName" />
    }
}

<FluentSelect Appearance="@settings.Appearance"
              AriaLabel="@settings.AriaLabel"
              Disabled="@settings.Disabled"
              Height="@settings.Height"
              Label="@settings.Label"
              Placeholder="@settings.Placeholder"
              ReadOnly="@settings.ReadOnly"
              Required="@settings.Required"
              Style="@settings.Style"
              Width="@settings.Width"
              Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
              @bind-SelectedOption="@themeSettings.OfficeColor">
    <OptionTemplate>
        <FluentStack hidden="@notLoaded">
            <FluentIcon Value="@settings.Icon"
                        Color="Color.Custom"
                        CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4")" />
            <FluentLabel>@context</FluentLabel>
        </FluentStack>
    </OptionTemplate>
</FluentSelect>

@code {
	private ThemeColorSettings settings = new();
	private DesignThemeSettings themeSettings = new();

	//Helps prevent flicker of loading/displaying all colors before resizing to the Height setting
	private bool loaded;
	private bool notLoaded => !loaded;

	[Parameter]
	public ThemeColorSettings? Settings { get; set; }

	/// <summary>
	/// <see cref="IThemeComponent.ExternalDesignTheme"/>
	/// </summary>
	[Parameter]
    public bool ExternalDesignTheme { get; set; }

    /// <summary>
    /// <see cref="IThemeComponent.ThemeSettings"/>
    /// </summary>
	[Parameter]
	public DesignThemeSettings? ThemeSettings { get; set; }

	/// <summary>
	/// <see cref="FluentDesignTheme.OnLoaded"/>
	/// </summary>
    [Parameter]
    public EventCallback<LoadedEventArgs> Loaded { get; set; }

    /// <summary>
    /// <see cref="FluentDesignTheme.OnLuminanceChanged"/>
    /// </summary>
    [Parameter]
    public EventCallback<LuminanceChangedEventArgs> LuminanceChanged { get; set; }

    private async Task OnLoaded(LoadedEventArgs e)
    {
        await Loaded.InvokeAsync(e);
    }

    private async Task OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        await LuminanceChanged.InvokeAsync(e);
    }

    protected override void OnParametersSet()
    {
        if (ExternalDesignTheme)
            ArgumentNullException.ThrowIfNull(ThemeSettings);

        themeSettings = ThemeSettings ?? new();
        settings = Settings ?? new();

        loaded = true;
    }
}
