@{
    if (!ExternalDesignTheme)
    {
        <FluentDesignTheme @bind-Mode="@themeSettings.Mode"
                           @bind-OfficeColor="@themeSettings.OfficeColor"
                           OnLoaded="@OnLoaded"
                           OnLuminanceChanged="@OnLuminanceChanged"
                           StorageName="@themeSettings.StorageName" />
    }
}

@{
    switch (Alignment)
    {
        case ThemeSelectAligment.Vertical:
            <FluentStack Orientation="Orientation.Vertical" Style="@verticalStyle">
                <ThemeMode ThemeSettings="@themeSettings" ExternalDesignTheme="true" />
                <ThemeColor ThemeSettings="@themeSettings" ExternalDesignTheme="true" />
            </FluentStack>
            break;
        default:
            <div style="@horizontalStyle">
                <FluentGrid>
                    <FluentGridItem>
                        <ThemeMode ThemeSettings="@themeSettings" ExternalDesignTheme="true" />
                    </FluentGridItem>
                    <FluentGridItem>
                        <ThemeColor ThemeSettings="@themeSettings" ExternalDesignTheme="true" />
                    </FluentGridItem>
                </FluentGrid>
            </div>
            break;
    }
}

@code
{
    private string horizontalStyle => string.IsNullOrWhiteSpace(HorizontalStyle) ? "min-height: 250px;" : HorizontalStyle;
    private string verticalStyle => string.IsNullOrWhiteSpace(VerticalStyle) ? "" : VerticalStyle;
    private ThemeSelectSettings settings = new();
    private DesignThemeSettings themeSettings = new();
    private ThemeColorSettings colorSettings => settings.ColorSettings;
    private ThemeModeSettings modeSettings => settings.ModeSettings;

    [Parameter]
    public ThemeSelectAligment Alignment { get; set; }

    [Parameter]
    public ThemeSelectSettings? Settings { get; set; }

    /// <summary>
    /// Style for the surrounding div when Alignment is Horizontal.
    /// <see cref="FluentComponentBase.Style"/>
    /// Default is 'min-height: 250px';
    /// </summary>
    [Parameter]
    public string? HorizontalStyle { get; set; }

    /// <summary>
    /// Style for the FluentStack when Alignment is Vertical.
    /// <see cref="FluentComponentBase.Style"/>
    /// Default is null.
    /// </summary>
    [Parameter]
    public string? VerticalStyle { get; set; }

    /// <summary>
    /// <see cref="IThemeComponent.ExternalDesignTheme"/>
    /// </summary>
    [Parameter]
    public bool ExternalDesignTheme { get; set; }

    /// <summary>
    /// <see cref="IThemeComponent.ThemeSettings"/>
    /// </summary>
    [Parameter]
    public DesignThemeSettings? ThemeSettings { get; set; }

    /// <summary>
    /// <see cref="FluentDesignTheme.OnLoaded"/>
    /// </summary>
    [Parameter]
    public EventCallback<LoadedEventArgs> Loaded { get; set; }

    /// <summary>
    /// <see cref="FluentDesignTheme.OnLuminanceChanged"/>
    /// </summary>
    [Parameter]
    public EventCallback<LuminanceChangedEventArgs> LuminanceChanged { get; set; }

    private async Task OnLoaded(LoadedEventArgs e)
    {
        await Loaded.InvokeAsync(e);
    }

    private async Task OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        await LuminanceChanged.InvokeAsync(e);
    }

    protected override void OnParametersSet()
    {
        if (ExternalDesignTheme)
            ArgumentNullException.ThrowIfNull(ThemeSettings);

        themeSettings = ThemeSettings ?? new();
        settings = Settings ?? new();

        themeSettings.StateChanged += (string propertyName) =>
        {
            StateHasChanged();
        };
    }
}