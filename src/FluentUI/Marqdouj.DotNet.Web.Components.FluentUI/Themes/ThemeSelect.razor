@using Microsoft.FluentUI.AspNetCore.Components.Extensions
<FluentDesignTheme @bind-Mode="@options.Mode"
                   @bind-OfficeColor="@options.OfficeColor"
                   OnLoaded="@OnLoaded"
                   OnLuminanceChanged="@OnLuminanceChanged"
                   StorageName="@options.StorageName" />

@{
    switch (Alignment)
    {
        case ThemeSelectAligment.Vertical:
            <FluentStack Orientation="Orientation.Vertical" Style="@verticalStyle">
                <FluentSelect Label="@options.ThemeLabel"
                              Width="@options.ThemeWidth"
                              Style="@options.ThemeStyle"
                              Items="@(Enum.GetValues<DesignThemeModes>())"
                              @bind-SelectedOption="@options.Mode" />

                <FluentSelect Label="@options.ColorLabel"
                              Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
                              Height="@options.ColorHeight"
                              Style="@options.ColorStyle"
                              Width="@options.ColorWidth"
                              @bind-SelectedOption="@options.OfficeColor">
                    <OptionTemplate>
                        <FluentStack hidden="@notLoaded">
                            <FluentIcon Value="@options.ColorIcon"
                                        Color="Color.Custom"
                                        CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4")" />
                            <FluentLabel>@context</FluentLabel>
                        </FluentStack>
                    </OptionTemplate>
                </FluentSelect>
            </FluentStack>
            break;
        default:
            <div style="@horizontalStyle">
                <FluentGrid>
                    <FluentGridItem>
                        <FluentSelect Label="@options.ThemeLabel"
                                      Width="@options.ThemeWidth"
                                      Style="@options.ThemeStyle"
                                      Items="@(Enum.GetValues<DesignThemeModes>())"
                                      @bind-SelectedOption="@options.Mode" />
                    </FluentGridItem>

                    <FluentGridItem>
                        <FluentSelect Label="@options.ColorLabel"
                                      Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
                                      Height="@options.ColorHeight"
                                      Style="@options.ColorStyle"
                                      Width="@options.ColorWidth"
                                      @bind-SelectedOption="@options.OfficeColor">
                            <OptionTemplate>
                                <FluentStack hidden="@notLoaded">
                                    <FluentIcon Value="@options.ColorIcon"
                                                Color="Color.Custom"
                                                CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4")" />
                                    <FluentLabel>@context</FluentLabel>
                                </FluentStack>
                            </OptionTemplate>
                        </FluentSelect>
                    </FluentGridItem>
                </FluentGrid>
            </div>
            break;
    }
}

@code
{
    private string horizontalStyle => string.IsNullOrWhiteSpace(HorizontalStyle) ? "min-height: 250px;" : HorizontalStyle;
    private string verticalStyle => string.IsNullOrWhiteSpace(VerticalStyle) ? "" : VerticalStyle;
    private ThemeSelectOptions options = new();
    //Helps prevent flicker of loading/displaying all colors before resizing to the Height setting
    private bool loaded;
    private bool notLoaded => !loaded;

    [Parameter]
    public ThemeSelectAligment Alignment { get; set; }
    [Parameter]
    public ThemeSelectOptions? Options { get; set; }

    /// <summary>
    /// Style for the surrounding div when Alignment is Horizontal.
    /// Default is min-height: 250px;
    /// </summary>
    [Parameter]
    public string? HorizontalStyle { get; set; }

    /// <summary>
    /// Style for the FluentStack when Alignment is Vertical.
    /// Default is empty string.
    /// </summary>
    [Parameter]
    public string? VerticalStyle { get; set; }

    [Parameter]
    public EventCallback<LoadedEventArgs> Loaded { get; set; }
    [Parameter]
    public EventCallback<LuminanceChangedEventArgs> LuminanceChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Options == null)
            return;

        options = Options;
    }

    private async Task OnLoaded(LoadedEventArgs e)
    {
        loaded = true;
        await Loaded.InvokeAsync(e);
    }

    private async Task OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        await LuminanceChanged.InvokeAsync(e);
    }
}