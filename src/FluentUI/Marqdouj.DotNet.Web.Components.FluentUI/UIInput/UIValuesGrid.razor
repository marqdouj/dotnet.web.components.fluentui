<FluentDataGrid Items="@items"
				TGridItem="IUIModelValue"
				Style="@Style"
				Class="@Class"
				DisplayMode="@displayMode"
				GenerateHeader="@generateHeader"
				GridTemplateColumns="@GridTemplateColumns"
				MultiLine="@MultiLine"
				OnRowClick="@OnRowClick"
				OnRowDoubleClick="@OnRowDoubleClick"
				OnRowFocus="@OnRowFocus"
				ResizableColumns="@ResizableColumns"
				ResizeColumnOnAllRows="@ResizeColumnOnAllRows"
				ResizeType="@ResizeType"
				RowSize="@RowSize"
				ShowHover="@ShowHover">
	<ChildContent>
		<PropertyColumn Property="@(p => p.NameDisplay)" Title="Name" Align="Align.Start" />

		@{
			switch (ValueProperty)
			{
				case UIValuesGridValueProperty.Formatted:
					<PropertyColumn Property="@(p => p.FormatValue)" title="Value" Align="Align.Start" />
					break;
				case UIValuesGridValueProperty.Raw:
				default:
					<PropertyColumn Property="@(p => p.Value)" title="Value" Align="Align.Start" />
					break;
			}
		}
		@if (WithDescription)
		{
			<PropertyColumn Property="@(p => p.Description)" Align="Align.Start" />
		}
	</ChildContent>
	<EmptyContent>
		@EmptyContent
	</EmptyContent>
		
</FluentDataGrid>

@code {
	private IQueryable<IUIModelValue>? items => Items?.AsQueryable();
	private DataGridDisplayMode displayMode;
	private GenerateHeaderOption? generateHeader;

	/// <summary>
	/// <see cref="FluentComponentBase.Class"/>
	/// </summary>
	[Parameter]
	public string? Class { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.DisplayMode"/>
	/// Defaults to <see cref="DataGridDisplayMode.Table"/>.
	/// </summary>
	[Parameter]
	public DataGridDisplayMode DisplayMode { get; set; } = DataGridDisplayMode.Table;

	/// <summary>
	/// The display mode to use when there are no items.
	/// Depending on the <see cref="DisplayMode"/>, 
	/// the header may be displayed differently when there are no items;
	/// especially in Table mode, as the header is shown in the middle of the grid.
	/// Defaults to <see cref="DataGridDisplayMode.Grid"/>.
	/// </summary>
	[Parameter]
	public DataGridDisplayMode DisplayModeEmpty { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.EmptyContent"/>
	/// </summary>
	[Parameter]
	public RenderFragment? EmptyContent { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.GenerateHeader"/>.
	/// Defaults to <see cref="GenerateHeaderOption.Sticky"/>.
	/// </summary>
	[Parameter]
	public GenerateHeaderOption? GenerateHeader { get; set; } = GenerateHeaderOption.Sticky;

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.GridTemplateColumns"/>
	/// </summary>
	[Parameter]
	public string? GridTemplateColumns { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.MultiLine"/>.
	/// Defaults to true.
	/// </summary>
	[Parameter]
	public bool MultiLine { get; set; } = true;

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.ResizableColumns"/>
	/// </summary>
	[Parameter]
	public bool ResizableColumns { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.ResizeColumnOnAllRows"/>
	/// </summary>
	[Parameter]
	public bool ResizeColumnOnAllRows { get; set; } = true;

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.ResizeType"/>
	/// </summary>
	[Parameter]
	public DataGridResizeType? ResizeType { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.RowSize"/>
	/// </summary>
	[Parameter]
	public DataGridRowSize RowSize { get; set; } = DataGridRowSize.Small;

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.ShowHover"/>
	/// </summary>
	[Parameter]
	public bool ShowHover { get; set; }

	/// <summary>
	/// <see cref="FluentComponentBase.Style"/>
	/// </summary>
	[Parameter]
	public string? Style { get; set; }

	[Parameter, EditorRequired]
	public List<IUIModelValue> Items { get; set; }

	/// <summary>
	/// <see cref="UIValuesGridValueProperty"/>
	/// Defaults to <see cref="UIValuesGridValueProperty.Raw"/>
	/// </summary>
	[Parameter]
	public UIValuesGridValueProperty ValueProperty { get; set; }

	/// <summary>
	/// Indicates whether to show the description column.
	/// </summary>
	[Parameter]
	public bool WithDescription { get; set; } = true;

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.OnRowClick"/>
	/// </summary>
	[Parameter]
	public EventCallback<IUIModelValue> OnRowClicked { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.OnRowDoubleClick"/>
	/// </summary>
	[Parameter]
	public EventCallback<IUIModelValue> OnRowDoubleClicked { get; set; }

	/// <summary>
	/// <see cref="FluentDataGrid{TGridItem}.OnRowFocus"/>
	/// </summary>
	[Parameter]
	public EventCallback<IUIModelValue> OnRowFocused { get; set; }

	private async Task OnRowClick(FluentDataGridRow<IUIModelValue> args)
	{
		await OnRowClicked.InvokeAsync(args.Item);
	}

	private async Task OnRowDoubleClick(FluentDataGridRow<IUIModelValue> args)
	{
		await OnRowDoubleClicked.InvokeAsync(args.Item);
	}

	private async Task OnRowFocus(FluentDataGridRow<IUIModelValue> args)
	{
		await OnRowFocused.InvokeAsync(args.Item);
	}

	protected override void OnParametersSet()
	{
		displayMode = DisplayMode;
		generateHeader = GenerateHeader;

		// If there are no items, switch to DisplayModeEmpty.
		var noItems = items == null || !items.Any();
		if (noItems)
		{
			displayMode = DisplayModeEmpty;
		}
	}
}
